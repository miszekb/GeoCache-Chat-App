# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ChatRoom {
  _id: ID!
  name: String!
  description: String
  users: [User!]
  owner: User!
  isFound: Boolean!
  latitude: Float!
  longitude: Float!
  difficultyLevel: Float!
  isSponsored: Boolean!
}

input CreateChatRoomInput {
  name: String!
  description: String
  latitude: Float!
  longitude: Float!
  difficultyLevel: Float!
  isSponsored: Boolean!
}

input CreateUserInput {
  email: String!
  password: String!
  profile: ProfileInput!
  isCompany: Boolean!
  cachesFound: Float!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Message {
  _id: ID!
  msg: String!
  chatroom: ChatRoom!
  from: User
  guestId: String
  guestName: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MessageInput {
  guestId: String
  guestName: String
  msg: String!
  chatroom: ID!
  nickname: String!
}

type Mutation {
  createUser(user: CreateUserInput!): ID!
  setNewProfileData(profilePic: String!, lastName: String!, firstName: String!, user: String!): User!
  addCacheFound(caches: Float!, user: String!): User!

  """Adds new message to chatroom"""
  addMessage(message: MessageInput!): ID

  """Adds user to existing chatroom"""
  joinToChatroom(chatroom: String!): ChatRoom!

  """Sets chatroom as already found"""
  setChatroomFound(isFound: Boolean!, chatroom: String!): ChatRoom!

  """Creates and return new chatroom id"""
  createNewChatroom(chatroom: CreateChatRoomInput!): ID!
}

type Profile {
  firstName: String!
  lastName: String!
  profilePicture: String!
}

input ProfileInput {
  firstName: String!
  lastName: String!
  profilePicture: String!
}

type Property {
  address: String!
  placeId: String!
  rentAmount: Float!
}

input PropertyInput {
  address: String!
  placeId: String!
  rentAmount: Float!
}

type Query {
  me: User!
  users: [User!]!

  """Get all messages for specified chatroom by chatroomId"""
  messages(chatroom: String!): [Message!]

  """Get ChatRoom by id"""
  chatroom(_id: String!): ChatRoom!

  """Get list of all chatrooms"""
  chatrooms: [ChatRoom!]!

  """Get list of all user chatrooms"""
  myChatrooms: [ChatRoom!]!
}

enum Role {
  User
  Admin
}

type User {
  _id: ID!
  profile: Profile!
  properties: [Property!]
  roles: [Role!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  isCompany: Boolean
  cachesFound: Float
  firstName: String!
  lastName: String!
  profilePicture: String!
}
